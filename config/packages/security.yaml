security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
  role_hierarchy:
    ROLE_STANDARD: ROLE_STANDARD
    ROLE_PREMIUM:
      - ROLE_STANDARD
    ROLE_USER:
      - ROLE_LIST
      - ROLE_VIEW
      - ROLE_CREATE
      - ROLE_EDIT
    ROLE_ADMIN:
      - ROLE_USER
      - ROLE_DELETE
    ROLE_SUPER_ADMIN:
      - ROLE_ADMIN
      - ROLE_ALLOWED_TO_SWITCH
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    app_user_provider:
      id: App\IdentityAndAccess\Infrastructure\Framework\Symfony\Security\SecurityUserProvider
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      lazy: true
      provider: app_user_provider
      logout:
        path: app_logout
        target: app_login
      custom_authenticators:
        - App\IdentityAndAccess\Infrastructure\Framework\Symfony\Security\AppAuthenticator

      remember_me:
        secret: '%kernel.secret%'
        name: REMEMBERME
        lifetime: 604800 # 1 week in seconds
        path: /
        samesite: 'lax'
        httponly: true
        secure: true
        always_remember_me: false
        remember_me_parameter: '_remember_me'
        token_provider: 'Symfony\Bridge\Doctrine\Security\RememberMe\DoctrineTokenProvider'
      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true
      access_denied_handler: App\IdentityAndAccess\Infrastructure\Framework\Symfony\Handler\AccessDeniedHandler
      access_denied_url: app_login
      login_throttling:
        max_attempts: 3          # per minute ...

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/, roles: PUBLIC_ACCESS , requires_channel: '%env(SECURE_SHEME)%' }
    - { path: ^/11invoice24, roles: [ IS_AUTHENTICATED_FULLY, ROLE_SUPER_ADMIN, ROLE_ADMIN, ROLE_USER, ROLE_STANDARD, ROLE_PREMIUM ], requires_channel: '%env(SECURE_SHEME)%' }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
